# -*- coding: utf-8 -*-
"""Copy of cv1_zadani.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ONG9ME1QR1isRXt24Er7NppitT_11knK

# Cvičení 1 - Opakování AUIN, úvod do Pythonu I



1.   Introduction to Python - data types (tuple, list, dictionary, numpy array), loops and conditionals, functions, Classes,  differences from Matlab, Numpy

2.   Nearest neighbor classifier

## Python basics

### List 
Lists are extremely similar to tuples. Lists are modifiable (or 'mutable', as a programmer may say), so their values can be changed. Most of the time we use lists, not tuples, because we want to easily change the values of things if we need to.
"""

list1 = [1,2,3,4,'a']
list1.append(5)   #add new entry to the end of list
print(list1)

del list1[0]   #delete first entry from list
print(list1)

for item in list1:  #loop over item of list and print them one by one
  print(item)

list1 = [1,2,3,4]
list_of_lists = [list1,[5,6,7]]  #store two lists inside another list

print(list_of_lists)

print(list_of_lists[0][0])

list1=[1,2,3,4]
list2=['a','b','c']

list3=list1+list2  ## plus concatenate two lists

print(list3)

list1=[1,2,3,4]
dir(list1) ##print all method of list1

## try to write  list1.   and press tab to see all avalaible methods and atributes of list1
  
list.

#print all variables
whos

"""### Tuple  
A tuple is a collection which is ordered and unchangeable. In Python tuples are written with round brackets.
"""

tuple1 = (1,2,3,4)  #same as list - !but cannot be changed!
print(tuple1)





"""### String"""

s1='aaa'
s2='bbb'

print(s1+'-'+s2)

s1 = str(1)  ##convert to string

print(type(s1))  ## print data type
print(s1)



int1=int('1')   ##  convert to int

print(type(int1))
print(int1)

"""### Loops and Conditionals

End of statement is recognized based on indentation.
"""

for k in range(5):   ## for loop form 0 to 4
  print(k)

k=-1
while k<4:     # while loop form 0 to 4
  k+=1
  print(k)

a=1
if a==1:
  print('1')

a=2

if a==1:
  print('1')

elif a!=3 and a<5:
  print('2')
  
else:
  print('!')

"""### Functions"""

def plus(a,b=2):   # function with one optional input
  c = a + b
  return c 

print(plus(1,1))

print(plus(1))

def plus2(a,b=2): 
  a_b = a + b
  return a,b,a_b

list_of_outputs = plus2(1,1)
print(list_of_outputs)

first_output = plus2(1,1)[0]
print(first_output)

a,b,a_b = plus2(1,1)
print(a_b)

"""### Some python trick"""

a=1
b=2

a,b=b,a

print(a,b)

a,b=['dog',2]

print(a,b)

list1 = ['dog','cat','fish']

for k,item in enumerate(list1):
  print(k)
  print(item)

"""### Copy in python
Python a=b does not create copy of data, but only new reference to same object. => If original thing is changed, then also new one:
"""

list1=[1,2,3,4]

list2=list1

list2[2]=99

print(list1)

list1=[1,2,3,4]

list2=list1.copy()

list2[2]=99

print(list1)

"""### Python Classes and Objects

Python is an object oriented programming language.

Almost everything in Python is an object, with its properties and methods.


attribute/poperty - variables of object

method - function on the object

class - code of object/type of object

object - instance of class - variable of specific class
"""

#class with atributes
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
    
  def multiply(self,a,b):
    return a*b

    
karel =  Person('Karel Novák',24)
petr =  Person('Petr',28)

print(karel.name)

print(petr.name)

c=karel.multiply(2,3)
print(c)
    
c=petr.multiply(3,3)
print(c)

## try avaliable methods and atributes - write karel. and pres tab

## karel.

"""### Importing libraries"""

import numpy  # standard import

l = numpy.log(5)
print(l)
e = numpy.exp(5)
print(e)

import numpy as np    # import with nickname - some libraries have "popular" nick name     
# numpy->np     matplotlib.pyplot->plt    

l = np.log(5)
print(l)


from numpy import log
l = log(5)
print(l)


from numpy import *   # import everything - not recomended

e=exp(5)
print(e)




# try to use tab for object methods and atributes recomendation - write np. and pres tab   (np must be already imported)

"""### NumPy

NumPy is very similar to Matlab:

https://docs.scipy.org/doc/numpy/user/numpy-for-matlab-users.html
"""

import numpy as np


a=np.array([[ 1, 2, 3],[ 4, 5, 6]])    ## transform list of lists to 2D numpy array

## a=3
print(a)

print(a**2)    # square of all elements in array (matlab a.^2)

print(a[0,0:2])

a=np.arange(1,6,2)    # create array in some range (matalb - 1:2:5)

print(a)

a=np.array([[ 1, 2, 3],[ 4, 5, 6]]) 

print(a[a>=5])

a=np.array([[ 1, 2, 3],[ 4, 5, 6]]) 

print(a.shape)

a=a.reshape([3,2])  #reshape array

print(a.shape)

a=np.array([[ 1, 2, 3],[ 4, 5, 6]]) 

print(a.dtype)

a=np.zeros([2,3])
print(a.shape)
a=a.reshape([3,2])  #reshape array
print(a.shape)

print(a[0,:])

"""### Matplotlib


Matplotlib is a Python 2D plotting library.

Syntax is again very similar to matlab.
"""

import numpy as np
import matplotlib.pyplot as plt

x=np.arange(0,10)

y=x**2;


plt.plot(x,y)
plt.show()



plt.plot(x,y)
plt.plot(x,y,'r*')
plt.show()

img=np.random.rand(20,20)

plt.imshow(img)
plt.show()

"""## Nearest neighbor classifier


http://vision.stanford.edu/teaching/cs231n-demos/knn/


For classification of new sample find nearest example form training dataset and assign same class.

Create NN classifier with numpy library:

-   Create function to calculate Euclidean distance
-   Iterate over datapoints and caluclate distances to new sample.
-   Find datapoint with smalest distance.
-   Plot original data and new point with 'x' symbol and corect color.
"""

from sklearn import datasets
import numpy as np
import matplotlib.pyplot as plt

iris = datasets.load_iris()

data = iris.data[:,[0,2]]
label = iris.target

plt.figure(figsize=(12, 12))
plt.plot(data[label==0,0],data[label==0,1],'r*')
plt.plot(data[label==1,0],data[label==1,1],'g*')
plt.plot(data[label==2,0],data[label==2,1],'b*')
plt.axes().set_aspect('equal')
plt.show()

new_sample=np.array([6,3.5])
new_sample2=np.array([6,3.6])

def eukleid(x,y):   # function Eukleid distance
  return np.sqrt(np.sum((x-y)**2))

eukleid(new_sample,new_sample2)

distance=[]
for k in range(data.shape[0]):   ## for loop form 0 to 150  
  
  d=eukleid(new_sample,data[k,:])
  distance.append(d)
  
  
int=np.argmin(distance)
print(int)

ind = np.argsort(distance)
ind = #pootřebuji z toho vybrat jen prvních 5 indexu a ty použít



import statistics

trida = label[int]
trida2 = statistics.mode(label[ind])


plt.figure(figsize=(12, 12))
plt.plot(data[label==0,0],data[label==0,1],'r*')
plt.plot(data[label==1,0],data[label==1,1],'g*')
plt.plot(data[label==2,0],data[label==2,1],'b*')
plt.axes().set_aspect('equal')
plt.show()